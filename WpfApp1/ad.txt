using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WpfApp1
{
    public partial class MainWindow : Window
    {   
        public static MusicList allMusicList;
        public static MusicList playingMusicList;

        public static MusicTagList allTagList;

        public int playingIndex = 0;


        private Grid _nowGrid;

        private bool _isAddingTag = true;
        private List<MusicTag> _addingTags = new List<MusicTag>();
        private List<MusicTag> _removingTags = new List<MusicTag>();

        private MMDevice _device;
        private ISoundOut _soundOut = null;
        private IWaveSource _soundSource = null;

        private bool _isUpdating = true;

        private float _progressBar = 0;
        

        public MainWindow()
        {
            InitializeComponent();
            
            allMusicList = new MusicList();
            allMusicList = (MusicList)FindResource("rscAllMusicList");
            playingMusicList = new MusicList();
            playingMusicList = (MusicList)FindResource("rscPlayingMusicList");
            allTagList = new MusicTagList();
            allTagList = (MusicTagList)FindResource("rscAllTagList");

            // cscore Device 설정
            _device = new MMDeviceEnumerator().EnumAudioEndpoints(DataFlow.Render, DeviceState.Active)[0];

            Debug.Print(allMusicList.Count.ToString());

            if (allMusicList.Count < 1)
            {
                Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();

                Nullable<bool> result = dlg.ShowDialog();

                allMusicList.Add(new Music(dlg.FileName));
            }

            Open(allMusicList[0].Path);

            _nowGrid = PlayingTab;
            
            Update();

            _soundOut.Volume = 0.5f;
        }

        private async void Update()
        {
            while (_isUpdating)
            {
                _progressBar = (float)_soundSource.Position / _soundSource.Length * (float)Screen.Width;

                ProgressBar.Width = _progressBar;

                if (_soundSource.Position == _soundSource.Length)
                {
                    if (++playingIndex >= playingMusicList.Count)
                        playingIndex = 0;

                    Open(playingMusicList[playingIndex].Path);
                    _soundOut.Play();
                }

                await Task.Delay(100);
            }
        }

        private void PlayingMusicList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            Open(((Music)PlayingMusicListBox.SelectedItem).Path);
            _soundOut.Play();
        }

        private void AllMusicList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            playingMusicList.Clear();
            foreach(Music m in allMusicList)
            {
                playingMusicList.Add(m);
            }
            Open(((Music)AllMusicListBox.SelectedItem).Path);
            _soundOut.Play();
        }

        private void CleanupPlayback()
        {
            if (_soundOut != null)
            {
                _soundOut.Dispose();
                _soundOut = null;
            }
            if (_soundSource != null)
            {
                _soundSource.Dispose();
                _soundSource = null;
            }
        }
        
        private void Open(string filename)
        {
            CleanupPlayback();

            _soundSource = CodecFactory.Instance.GetCodec(filename);

            _soundOut = new WasapiOut() { Device = _device, Latency = 100 };
            _soundOut.Initialize(_soundSource); 
        }

        private void PlayButton_Click(object sender = null, RoutedEventArgs e = null)
        {
            if (_soundOut.PlaybackState == PlaybackState.Playing)
            {
                _soundOut.Stop();
            }
            else
            {
                _soundOut.Play();
                _soundSource.Position = 21229056;
            }
        }

        private void NextButton_Click(object sender, RoutedEventArgs e)
        {
            playingIndex++;
            if (playingIndex >= playingMusicList.Count)
                playingIndex = 0;

            bool isPlaing = _soundOut.PlaybackState == PlaybackState.Playing;

            Open(playingMusicList[playingIndex].Path);
            if (isPlaing)
                _soundOut.Play();
        }

        private void AddTag(ref MusicList musicList, MusicTag tag)
        {
            foreach (Music m in tag)
            {
                bool overlapped = false;
                foreach(Music temp in musicList)
                {
                    if (temp.Path == m.Path)
                        overlapped = true;
                }

                if(!overlapped)
                    musicList.Add(m);
            }
        }

        private void RemoveTag(ref MusicList musicList, MusicTag tag)
        {
            foreach (Music m in tag)
            {
                bool overlapped = false;
                foreach (Music temp in musicList)
                {
                    if (temp.Path == m.Path)
                        overlapped = true;
                }

                if (overlapped)
                    musicList.Remove(m);
            }
        }

        private void FileButton_Click(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();

            Nullable<bool> result = dlg.ShowDialog();

            allMusicList.Add(new Music(dlg.FileName));
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            _soundOut.Stop();
            _soundOut.Dispose();
        }

        private void Menu_AllMusicTabButton_Click(object sender, RoutedEventArgs e)
        {
            _nowGrid.Visibility = Visibility.Hidden;
            AllMusicTab.Visibility = Visibility.Visible;
            _nowGrid = AllMusicTab;
        }

        private void Menu_PlayingTabButton_Click(object sender, RoutedEventArgs e)
        {
            _nowGrid.Visibility = Visibility.Hidden;
            PlayingTab.Visibility = Visibility.Visible;
            _nowGrid = PlayingTab;
        }

        private void Menu_TagTabButton_Click(object sender, RoutedEventArgs e)
        {
           _nowGrid.Visibility = Visibility.Hidden;
            TagTab.Visibility = Visibility.Visible;
            _nowGrid = TagTab;
        }

        private void FillAddButton_Click(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();

            Nullable<bool> result = dlg.ShowDialog();

            AddFile(dlg.FileName);
        }

        private void AddFile(string path)
        {

            bool overlapped = false;
            foreach (Music temp in allMusicList)
            {
                if (temp.Path == path)
                    overlapped = true;
            }

            if (!overlapped)
                allMusicList.Add(new Music(path));
        }



        private void TagsList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            MusicTag tempTag = ((KeyValuePair<string, MusicTag>)(TagsListBox.SelectedItem)).Value;
            if (_isAddingTag)
            {
                if (_addingTags.Contains(tempTag))
                    _addingTags.Remove(tempTag);
                else
                    _addingTags.Add(tempTag);

                string result = string.Empty;
                foreach(MusicTag temp in _addingTags)
                {
                    result += "#" + temp.Name + " ";
                }
                txtAddedTag.Text = result;
            }
            else
            {
                if (_removingTags.Contains(tempTag))
                    _removingTags.Remove(tempTag);
                else
                    _removingTags.Add(tempTag);

                string result = string.Empty;
                foreach (MusicTag temp in _removingTags)
                {
                    result += "#" + temp.Name + " ";
                }
                txtRemovedTag.Text = result;
            }
        }

        private void TagAddButton_Click(object sender, RoutedEventArgs e)
        {
            TagAddWindow window = new TagAddWindow();
            string temp = string.Empty;

            if (window.ShowDialog() == true)
            {
                temp = window.TagName;
            }

            if(!allTagList.ContainsKey(temp))
                allTagList.Add(window.TagName, new MusicTag(window.TagName));

            allTagList[temp].Add((Music)PlayingMusicListBox.SelectedItem);
        }

        private void MoveButton_Click(object sender, RoutedEventArgs e)
        {
            Open(allTagList["asdf"][1].Path);
            _soundOut.Play();
        }
        
        private void btnTagTypeChange_Click(object sender, RoutedEventArgs e)
        {
            _isAddingTag = !_isAddingTag;
        }

        private void btnTagApply_Click(object sender, RoutedEventArgs e)
        {
            MusicList tempList = new MusicList();

            foreach (MusicTag tag in _addingTags)
            {
                AddTag(ref tempList, tag);
            }
            foreach (MusicTag tag in _removingTags)
            {
                RemoveTag(ref tempList, tag);
            }

            playingMusicList.Clear();
            foreach (Music m in tempList)
            {
                playingMusicList.Add(m);
            }
            Open(playingMusicList[0].Path);
            _soundOut.Play();
        }

        private void AllMusicListBox_Drop(object sender, DragEventArgs e)
        {
            if(e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

                foreach (string temp in files)
                {
                    AddFile(temp);
                }
            }
        }
    }
}
